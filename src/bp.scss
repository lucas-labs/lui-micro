// Breakpoints Utilities
@use 'sass:list';
@use 'utils';

$breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
);

@mixin set-breakpoints($bps) {
    @if list.length($bps) > 0 {
        $breakpoints: $bps !global;
    }
}

@function breakpoints() {
    @return $breakpoints;
}

@function breakpoint-next($name, $breakpoints: $breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);

    @if not $n {
        @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
    }

    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if(utils.strip-unit($min) != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max and $max > 0, $max - .02, null);
}

@function breakpoint-infix($name, $breakpoints: $breakpoints) {
    @return if(breakpoint-min($name, $breakpoints)==null, "", "-#{$name}");
}

@mixin up($name, $breakpoints: $breakpoints) {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }

    @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin down($name, $breakpoints: $breakpoints) {
    $max: breakpoint-max($name, $breakpoints);

    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }

    @else {
        @content;
    }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin between($lower, $upper, $breakpoints: $breakpoints) {
    $min: breakpoint-min($lower, $breakpoints);
    $max: breakpoint-max($upper, $breakpoints);

    @if $min !=null and $max !=null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }

    @else if $max==null {
        @include up($lower, $breakpoints) {
            @content;
        }
    }

    @else if $min==null {
        @include down($upper, $breakpoints) {
            @content;
        }
    }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin only($name, $breakpoints: $breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    $next: breakpoint-next($name, $breakpoints);
    $max: breakpoint-max($next);

    @if $min !=null and $max !=null {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }

    @else if $max==null {
        @include up($name, $breakpoints) {
            @content;
        }
    }

    @else if $min==null {
        @include down($next, $breakpoints) {
            @content;
        }
    }
}

@mixin not($name, $breakpoints: $breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    $next: breakpoint-next($name, $breakpoints);
    $max: breakpoint-max($next, $breakpoints);

    @if $min !=null and $max !=null {
        @media (max-width: $min), (min-width: $max) {
            @content;
        }
    }

    @else if $max==null {
        @include down($name, $breakpoints) {
            @content;
        }
    }

    @else if $min==null {
        @include up($next, $breakpoints) {
            @content;
        }
    }
}
