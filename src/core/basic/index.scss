@use '../../utils';
@use 'sass:list';
@use 'sass:map';

@function -valid-typography($typography) {
    @return $typography != null and list.length($typography) > 0;
}

@mixin -make-typo($selector: null, $props: (), $name: null) {
    @if -valid-typography($props) {
        @if $selector != null {
            #{$selector} {
                @include utils.make-typo-vars($props, $name)
            }
        } @else {
            @include utils.make-typo-vars($props, $name);
        }

    }
}

@mixin create-basic-styles($typographies: (), $colors: (), $options: ()) {
    $h1: utils.filter-props(utils.get-nested($typographies, "heading/h1"));
    $h2: utils.filter-props(utils.get-nested($typographies, "heading/h2"));
    $h3: utils.filter-props(utils.get-nested($typographies, "heading/h3"));
    $h4: utils.filter-props(utils.get-nested($typographies, "heading/h4"));
    $h5: utils.filter-props(utils.get-nested($typographies, "heading/h5"));
    $h6: utils.filter-props(utils.get-nested($typographies, "heading/h6"));
    $text: utils.filter-props(utils.get-nested($typographies, "text"));

    $text-small-name: 'text/small';
    $text-small: utils.filter-props(utils.get-nested($typographies, "text/small"));

    @if($text-small == null) {
        $text-small: utils.filter-props(utils.get-nested($typographies, "text/sm"));
        $text-small-name: 'text/sm';
    }

    $base-colors: utils.get-bg-and-fg-colors($colors, $options, true);

    $text-color: map.get($base-colors, 'foreground');
    $bg-color: map.get($base-colors, 'background');
    $text-color: if($text-color == null or $text-color == (), null, $text-color);
    $bg-color: if($bg-color == null or $bg-color == (), null, $bg-color);

    /* basic styles */
    html,
    body {
        // base typography
        @include -make-typo($props: $text, $name: 'text');
        min-height: 100%;

        @if $text-color != null {
            color: $text-color;
        }

        @if $bg-color != null {
            background-color: $bg-color;
        }
    }
    
    html {
        body {
            blockquote {
                padding-left: 1rem;
                margin-bottom: 1rem;
            }
            
            img,
            canvas,
            iframe,
            video,
            svg,
            select,
            textarea {
                max-width: 100%;
            }
    
            small { @include -make-typo($props: $text-small, $name: $text-small-name); }

            p { margin-bottom: 1rem; }
            
            h1 { @include -make-typo($props: $h1, $name: 'heading/h1'); }
            h2 { @include -make-typo($props: $h2, $name: 'heading/h2'); }
            h3 { @include -make-typo($props: $h3, $name: 'heading/h3'); }
            h4 { @include -make-typo($props: $h4, $name: 'heading/h4'); }
            h5 { @include -make-typo($props: $h5, $name: 'heading/h5'); }
            h6 { @include -make-typo($props: $h6, $name: 'heading/h6'); }
        }
    }
}
